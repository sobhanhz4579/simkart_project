# پروژه Simkart

این یک پلتفرم تجارت الکترونیک مبتنی بر Django برای فروش سیم‌کارت است که شامل قابلیت‌های احراز هویت کاربر، سبد خرید، لیست علاقه‌مندی‌ها و کیف پول برای پرداخت‌های تومانی و TRX (ارز Tron) می‌باشد. این پروژه باید در یک محیط مجازی اجرا شود و شامل لاگ‌های لحظه‌ای برای خطاها و عملیات است.

## اپلیکیشن‌ها

پروژه شامل چهار اپلیکیشن اصلی است:

1. **simkart**: اپلیکیشن اصلی که مدیریت سیم‌کارت‌ها، حساب‌های کاربری، نظرات و فرم‌های تماس را بر عهده دارد. کاربران می‌توانند سیم‌کارت‌ها را مرور کنند، نظر بدهند و با پشتیبانی تماس بگیرند، در حالی که ادمین‌ها می‌توانند سیم‌کارت‌ها را ایجاد و مدیریت کنند.
2. **cart**: مدیریت سبد خرید، اضافه و حذف آیتم‌ها، ثبت آدرس حمل‌ونقل و صدور فاکتور برای سفارشات تکمیل‌شده.
3. **wishlist**: امکان افزودن سیم‌کارت‌ها به لیست علاقه‌مندی برای خریدهای آینده.
4. **wallet**: مدیریت کیف پول کاربران با پشتیبانی از شارژ و پرداخت به تومان (از طریق ZarinPal) و TRX (از طریق Tron). توجه داشته باشید که این اپلیکیشن برای تست طراحی شده و از محیط‌های sandbox استفاده می‌کند.

## نصب

این پروژه باید در یک محیط مجازی اجرا شود تا وابستگی‌ها را مدیریت کند. مراحل نصب به شرح زیر است:

1. **کلون کردن مخزن**:

   ```bash
   git clone https://your-repo-url.com/simkart_project_f.git
   cd simkart_project_f
   ```

2. **ایجاد محیط مجازی**:

   ```bash
   python -m venv myenv
   ```

3. **فعال‌سازی محیط مجازی**:

   - ویندوز:

     ```bash
     myenv\Scripts\activate
     ```

   - لینوکس/مک:

     ```bash
     source myenv/bin/activate
     ```

4. **نصب وابستگی‌ها**:

   ```bash
   pip install -r requirements.txt
   ```

## پیکربندی

1. **تنظیم فایل** `.env`: فایل `.env` را در دایرکتوری اصلی ایجاد کرده و متغیرهای زیر را با مقادیر واقعی جایگزین کنید:

   ```
   DJANGO_SECRET_KEY=your_secret_key
   DJANGO_DEBUG=True  # در محیط تولید False کنید
   DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1

   EMAIL_HOST=smtp.gmail.com
   EMAIL_PORT=587
   EMAIL_HOST_USER=your_email@gmail.com
   EMAIL_HOST_PASSWORD=your_email_password
   EMAIL_USE_TLS=True

   REDIS_LOCATION=redis://127.0.0.1:6379/0

   JWT_ACCESS_LIFETIME_MINUTES=5
   JWT_REFRESH_LIFETIME_DAYS=1

   SUPPORT_EMAIL=support@example.com

   ZARINPAL_MERCHANT_ID=your_zarinpal_merchant_id
   ENCRYPTION_KEY=your_encryption_key
   ```

   - **تولید** `ENCRYPTION_KEY`: از فایل `generate_key.py` برای تولید کلید رمزنگاری استفاده کنید:

     ```bash
     python generate_key.py
     ```

     خروجی را کپی کرده و به‌عنوان `ENCRYPTION_KEY` در `.env` قرار دهید.

   - **تست ZarinPal**: برای تست، از شناسه تجاری sandbox ZarinPal (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) استفاده شده است. برای تولید، آن را با شناسه تجاری واقعی از ZarinPal جایگزین کنید.

2. **پیکربندی دیتابیس**:

   - پروژه به‌طور پیش‌فرض از SQLite (`db.sqlite3`) استفاده می‌کند. برای استفاده از دیتابیس دیگری (مانند PostgreSQL)، تنظیمات `DATABASES` را در `settings.py` با اعتبارات مناسب به‌روزرسانی کنید.

3. **اعمال مایگریشن‌ها**:

   ```bash
   python manage.py migrate
   ```

4. **ایجاد سوپریوزر**:

   ```bash
   python manage.py createsuperuser
   ```

## اجرای پروژه

1. **اجرای سرور توسعه**:

   ```bash
   python manage.py runserver
   ```

2. **دسترسی به پنل ادمین**: به \`\[invalid url, do not cite\] بروید و با اعتبارات سوپریوزر وارد شوید.

3. **تعامل با APIها**: از ابزارهایی مانند Postman یا curl برای دسترسی به نقاط پایانی API که در فایل‌های `urls.py` هر اپلیکیشن تعریف شده‌اند (مانند `/api/simkart/`، `/api/cart/`، `/api/wishlist/`، `/api/wallet/`) استفاده کنید.

## لاگ‌ها

پروژه لاگ‌های خطا و عملیات را به‌صورت لحظه‌ای در فایل‌های زیر در دایرکتوری اصلی ذخیره می‌کند:

- `error.log`: تمام پیام‌های سطح خطا از Django و سایر بخش‌های برنامه را ثبت می‌کند. برای عیب‌یابی مشکلات مانند خطاهای سرور یا دیتابیس مفید است.
- `search_logs.log`: فعالیت‌های جستجو، مانند کوئری‌هایی که نتیجه‌ای نداشته‌اند، را ثبت می‌کند. برای نظارت بر رفتار کاربران در جستجو استفاده می‌شود.

برای مشاهده لاگ‌ها، فایل‌ها را در دایرکتوری اصلی با استفاده از ویرایشگر متن یا ابزارهای خط فرمان مانند `cat` یا `less` باز کنید:

```bash
cat error.log
cat search_logs.log
```

## یادداشت‌ها

- **آزمایشی بودن wallet**: اپلیکیشن wallet برای تست طراحی شده و از محیط‌های sandbox ZarinPal و Tron استفاده می‌کند. برای تولید، باید `ZARINPAL_MERCHANT_ID` و تنظیمات Tron به مقادیر واقعی تغییر کنند.
- **Placeholderهای تنظیمات**: مطمئن شوید که تمام placeholderها (مانند `...`) در `.env` و `settings.py` با مقادیر واقعی جایگزین شوند. برای مثال، `DJANGO_SECRET_KEY` باید یک رشته امن و تصادفی باشد و `EMAIL_HOST_USER` باید یک آدرس ایمیل معتبر باشد.
- **محیط مجازی**: پروژه باید در یک محیط مجازی اجرا شود تا وابستگی‌ها را از بسته‌های سیستم عام جدا کند.
- **نسخه Django**: پروژه از Django 4.2.20 استفاده می‌کند، بنابراین از Python 3.8 یا بالاتر استفاده کنید.

